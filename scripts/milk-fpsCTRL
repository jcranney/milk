#!/usr/bin/env bash

# This script uses milk-argparse
# See template milk-scriptexample in module milk_module_example for template and instructions

# script 1-line description
MSdescr="Function Parameter Structure (PFS) control"


scriptname=$(basename $0)



# Extended description
MSextdescr="Monitors and controls function parameters
Connects to $MILK_SHM_DIR/*.fps.shm shared memory structures

$(tput bold) ENVIRONMENT VARIABLES $(tput sgr0)

    MILK_FPS_LOGFILE            output logfile for milk-fpsCTRL

Filtering to only display matching FPSs :
    FPS_FILTSTRING_NAME         name
    FPS_FILTSTRING_KEYWORD      keyword
    FPS_FILTSTRING_CALLFUNC     call function in source code
    FPS_FILTSTRING_MODULE       source code module


$(tput bold) EXAMPLE $(tput sgr0)

FPS_FILTSTRING_KEYWORD=\"aol1\" ${scriptname}
"

source milk-script-std-config


# default fifo and outlog names
ttystring=$( tty | tr -d \/ )
pname="fpsCTRL"
fifoname="$MILK_SHM_DIR/milkCLIfifo.${pname}.${ttystring}"
outlogname="$MILK_SHM_DIR/milkCLIlog.${pname}.${ttystring}"




# OPTIONS

MSopt+=( "f:fifo:set_fifoname:fifo[string]:input (f)ifo name" )
function set_fifoname() {
	fifoname="$1"
}


MSopt+=( "q:q:set_quietmode::(q)uiet mode" )
function set_quietmode () {
	 export MILK_TUIPRINT_NONE=1
}


MSopt+=( "s:s:set_stdiomode::use (s)tdio instead of ncurses" )
function set_stdiomode () {
	 export MILK_TUIPRINT_STDIO=1
}


MATCHMODE=0
MSopt+=( "m:m:set_matchmode::must (m)atch fpscmd/fpslist.txt" )
function set_matchmode () {
	 MATCHMODE=1
}


DEBUG=0
MSopt+=( "d:d:set_debugmode::(d)ebug mode, uses valgrind" )
function set_debugmode () {
	 export DEBUG=1
}




RequiredCommands=( milk )
RequiredFiles=()
RequiredDirs=()

source milk-argparse






# change process short name to append tty number
ttystring=$( tty | sed 's/.*\///' )
shortpname="fpsCTRL-${ttystring}"
echo -n "sh-${shortpname}" > /proc/self/comm





rm -f ${fifoname}
mkfifo ${fifoname}

CLIfifoname="${MILK_SHM_DIR}/fpsCLIfifo"

SF="$MILK_SHM_DIR/milkCLIstartup.${pname}.${ttystring}"
echo "fpsCTRL ${MATCHMODE} \"_ALL\" \"$fifoname\"" > $SF
echo "exitCLI" >> $SF

echo "fifoname = ${fifoname}"
echo "SF       = ${SF}"


if [ "$DEBUG" = "1" ]; then

    cp $(which milk) milkdebugtest
    OPTION="--leak-check=full --show-leak-kinds=all"
    OPTION="$OPTION --track-origins=yes"
    OPTION="$OPTION --num-callers=200"
    OPTION="$OPTION --show-reachable=yes"
    #OPTION="$OPTION --gen-suppressions=all"
    OPTION="$OPTION --log-file=milk.memcheck.log"
    OPTION="$OPTION --suppressions=$MILK_ROOT/milk.memcheck.supp"
    OPTION="$OPTION --max-stackframe=4442392"

    valgrind ${OPTION} ./milkdebugtest -n ${pname} -f ${CLIfifoname} -s ${SF}
    rm ./milkdebugtest

else
    echo "Running: milk -n ${shortpname} -f ${CLIfifoname} -s ${SF}"
    export MILK_QUIET=1
    milk -n ${shortpname} -f ${CLIfifoname} -s ${SF}
    #2> testout.txt

fi

rm ${SF}

rm ${fifoname}


# execute optional user-provided script upon exit
# script is in local directory

exitscriptname="${pname}-exitscript"
if [ -f ${exitscriptname} ]; then
    echo "running script ${exitscriptname}"
    source ${exitscriptname}
    rm ${exitscriptname}
fi
